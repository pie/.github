name: "Deploy via Rsync"
description: "Adds our private SSH key to the workflow runner so that it can access the remote server"
inputs:
  destination-path:
    description: "Destination path to copy files to"
    required: true
  source-path:
    description: "Source path to copy files from"
    required: false
    default: "."
  rsync-args:
    description: "Arguments to pass to rsync"
    required: false
    default: "--no-perms --no-times --no-owner --delete-after --delete-excluded"
  rsync-flags:
    description: "Flags to pass to rsync"
    required: false
    default: "-aqP"
  additional-rsync:
    description: "Run additional rsync if required"
    required: false
    default: "false"
  additional-source-path:
    description: "Additional source path to copy files from"
    required: false
    default: ""
  additional-destination-path:
    description: "Additional destination path to copy files to"
    required: false
    default: ""
  ssh-host:
    description: "SSH host to use"
    required: true
  ssh-port:
    description: "SSH port to use"
    required: false
    default: 22
  ssh-pass:
    description: "SSH pass to use"
    required: false
    default: "Default Baby"
  ssh-user:
    description: "SSH user to connect"
    required: false
    default: "piecode"
  composer:
    description: "Run composer install"
    required: false
    default: "false"
  sshpass:
    description: "Connect using SSH Pass instead of Key"
    required: false
    default: "false"
  npm:
    description: "Run npm install and build"
    required: false
    default: "false"
  node_version:
    description: "Node version to use"
    required: false
    default: "18"
  npm-run-command:
    description: "NPM run command to use"
    required: false
    default: "npm run build"

runs:
  using: "composite"
  steps:
    - name: Check out the Repo
      uses: actions/checkout@v3

    - name: Install Composer Dependencies if required
      if: ${{inputs.composer == 'true' }}
      uses: php-actions/composer@v6
      with:
        command: install
        args: --no-dev --no-interaction --no-progress --optimize-autoloader --prefer-dist
        
    - name: Install Node Dependencies if required
      if: ${{inputs.npm == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version || matrix.node }}

    - name: Install dependencies and build
      if: ${{inputs.npm == 'true' }}
      run: npm install && ${{inputs.npm-run-command}}
      shell: bash

    - name: Check for ignore file
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: ".rsyncignore"

    - name: File exists
      if: steps.check_files.outputs.files_exists == 'true'
      shell: bash
      # Only runs if all of the files exists
      run: |
        echo EXCLUDE_FROM=" --exclude-from=.rsyncignore " >> "$GITHUB_ENV"

    - name: File does not exist
      if: steps.check_files.outputs.files_exists != 'true'
      shell: bash
      # Only runs if any of the files does not exist
      run: |
        echo EXCLUDE_FROM="" >> "$GITHUB_ENV"
    
    - name: Rsync to the remote with pubkey
      if: inputs.sshpass != 'true'
      run: rsync ${{inputs.rsync-flags}}  ${{inputs.rsync-args}} ${{ env.EXCLUDE_FROM }} ${{inputs.source-path}} server:${{inputs.destination-path}}
      shell: bash

    - name: Set SSHPASS environment variable
      if: inputs.sshpass == 'true'
      run: echo "SSHPASS=${{inputs.ssh-pass}}" >> "$GITHUB_ENV"
      shell: bash

    - name: Check if SSHPASS is set (and set if not)
      if: inputs.sshpass == 'true'
      run: |
        if [ -z "$SSHPASS" ]; then
          echo "SSHPASS not found in environment - check workflow setup."
          exit 1
        else
          echo "SSHPASS is set (length=${#SSHPASS})."
        fi
      shell: bash

    - name: Rsync to the remote with sshpass
      if: inputs.sshpass == 'true'
      run: sshpass -e rsync ${{inputs.rsync-flags}}  ${{inputs.rsync-args}} ${{ env.EXCLUDE_FROM }} -e 'ssh -o StrictHostKeyChecking=no -p ${{inputs.ssh-port}}'  ${{inputs.source-path}} ${{inputs.ssh-user}}@${{inputs.ssh-host}}:${{inputs.destination-path}}
      shell: bash

    - name: Run additional rsync if required
      if: inputs.additional-rsync == 'true' && inputs.sshpass != 'true'
      run: rsync ${{inputs.rsync-flags}}  ${{inputs.rsync-args}} ${{ env.EXCLUDE_FROM }} ${{inputs.additional-source-path}} server:${{inputs.additional-destination-path}}
      shell: bash

    - name: Run additional rsync if required
      if: inputs.additional-rsync == 'true' && inputs.sshpass == 'true'
      run: sshpass -e rsync ${{inputs.rsync-flags}}  ${{inputs.rsync-args}} ${{ env.EXCLUDE_FROM }} -e 'ssh -o StrictHostKeyChecking=no -p ${{inputs.ssh-port}}'  ${{inputs.additional-source-path}} ${{inputs.ssh-user}}@${{inputs.ssh-host}}:${{inputs.additional-destination-path}}
      shell: bash